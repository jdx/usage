name "mise"
flag "-C,--cd" help="Change directory before running command" global=true {
    arg "<DIR>"
}
flag "--debug" help="Sets log level to debug" hide=true global=true
flag "--log-level" help="Set the log output verbosity" hide=true global=true {
    arg "<LEVEL>"
}
flag "-q,--quiet" help="Suppress non-error messages" global=true
flag "--trace" help="Sets log level to trace" hide=true global=true
flag "-v,--verbose" help="Show extra output (use -vv for even more)" var=true global=true count=true
flag "-y,--yes" help="Answer yes to all confirmation prompts" global=true
cmd "activate" {
    flag "-s,--shell" help="Shell type to generate the script for" hide=true {
        arg "<SHELL>"
    }
    flag "--status" help="Show \"mise: <PLUGIN>@<VERSION>\" message when changing directories"
    flag "-q,--quiet" help="Suppress non-error messages"
    arg "[SHELL_TYPE]" help="Shell type to generate the script for"
}
cmd "alias" {
    alias "a"
    alias "aliases" hide=true
    flag "-p,--plugin" help="filter aliases by plugin" {
        arg "<PLUGIN>"
    }
    flag "--no-header" help="Don't show table header"
    cmd "get" {
        arg "<PLUGIN>" help="The plugin to show the alias for"
        arg "<ALIAS>" help="The alias to show"
    }
    cmd "ls" {
        alias "list"
        flag "--no-header" help="Don't show table header"
        arg "[PLUGIN]" help="Show aliases for <PLUGIN>"
    }
    cmd "set" {
        alias "add" "create"
        arg "<PLUGIN>" help="The plugin to set the alias for"
        arg "<ALIAS>" help="The alias to set"
        arg "<VALUE>" help="The value to set the alias to"
    }
    cmd "unset" {
        alias "rm" "remove" "delete" "del"
        arg "<PLUGIN>" help="The plugin to remove the alias from"
        arg "<ALIAS>" help="The alias to remove"
    }
}
cmd "asdf" hide=true {
    arg "[ARGS]..." help="all arguments" var=true
}
cmd "bin-paths"
cmd "cache" {
    cmd "clear" {
        alias "c"
        alias "clean" hide=true
        arg "[PLUGIN]..." help="Plugin(s) to clear cache for e.g.: node, python" var=true
    }
}
cmd "completion" {
    alias "complete" "completions" hide=true
    flag "-s,--shell" help="Shell type to generate completions for" hide=true {
        arg "<SHELL_TYPE>"
    }
    arg "[SHELL]" help="Shell type to generate completions for"
}
cmd "config" {
    alias "cfg"
    flag "--no-header" help="Do not print table header"
    cmd "ls" {
        flag "--no-header" help="Do not print table header"
    }
    cmd "generate" {
        alias "g"
        flag "-o,--output" help="Output to file instead of stdout" {
            arg "<OUTPUT>"
        }
    }
}
cmd "current" {
    arg "[PLUGIN]" help="Plugin to show versions of e.g.: ruby, node, cargo:eza, npm:prettier, etc"
}
cmd "deactivate"
cmd "direnv" {
    cmd "envrc" hide=true
    cmd "exec" hide=true
    cmd "activate"
}
cmd "doctor"
cmd "env" {
    alias "e"
    flag "-s,--shell" help="Shell type to generate environment variables for" {
        arg "<SHELL>"
    }
    flag "-J,--json" help="Output in JSON format"
    arg "[TOOL@VERSION]..." help="Tool(s) to use" var=true
}
cmd "exec" {
    alias "x"
    flag "-c,--command" help="Command string to execute" {
        arg "<C>"
    }
    flag "-j,--jobs" help="Number of jobs to run in parallel\n[default: 4]" {
        arg "<JOBS>"
    }
    flag "--raw" help="Directly pipe stdin/stdout/stderr from plugin to user Sets --jobs=1"
    arg "[TOOL@VERSION]..." help="Tool(s) to start e.g.: node@20 python@3.10" var=true
    arg "[COMMAND]..." help="Command string to execute (same as --command)" var=true
}
cmd "global" hide=true {
    alias "g" hide=true
    flag "--pin" help="Save exact version to `~/.tool-versions`\ne.g.: `mise global --pin node@20` will save `node 20.0.0` to ~/.tool-versions"
    flag "--fuzzy" help="Save fuzzy version to `~/.tool-versions`\ne.g.: `mise global --fuzzy node@20` will save `node 20` to ~/.tool-versions\nthis is the default behavior unless MISE_ASDF_COMPAT=1"
    flag "--remove" help="Remove the plugin(s) from ~/.tool-versions" var=true {
        arg "<PLUGIN>"
    }
    flag "--path" help="Get the path of the global config file"
    arg "[TOOL@VERSION]..." help="Tool(s) to add to .tool-versions\ne.g.: node@20\nIf this is a single tool with no version, the current value of the global\n.tool-versions will be displayed" var=true
}
cmd "hook-env" hide=true {
    flag "-s,--shell" help="Shell type to generate script for" {
        arg "<SHELL>"
    }
    flag "--status" help="Show \"mise: <PLUGIN>@<VERSION>\" message when changing directories"
    flag "-q,--quiet" help="Hide warnings such as when a tool is not installed"
}
cmd "hook-not-found" hide=true {
    flag "-s,--shell" help="Shell type to generate script for" {
        arg "<SHELL>"
    }
    arg "<BIN>" help="Attempted bin to run"
}
cmd "implode" {
    flag "--config" help="Also remove config directory"
    flag "-n,--dry-run" help="List directories that would be removed without actually removing them"
}
cmd "install" {
    alias "i"
    flag "-f,--force" help="Force reinstall even if already installed"
    flag "-j,--jobs" help="Number of jobs to run in parallel\n[default: 4]" {
        arg "<JOBS>"
    }
    flag "--raw" help="Directly pipe stdin/stdout/stderr from plugin to user Sets --jobs=1"
    flag "-v,--verbose" help="Show installation output" var=true count=true
    arg "[TOOL@VERSION]..." help="Tool(s) to install e.g.: node@20" var=true
}
cmd "latest" {
    flag "-i,--installed" help="Show latest installed instead of available version"
    arg "<TOOL@VERSION>" help="Tool to get the latest version of"
    arg "[ASDF_VERSION]" help="The version prefix to use when querying the latest version same as the first argument after the \"@\" used for asdf compatibility" hide=true
}
cmd "link" {
    alias "ln"
    flag "-f,--force" help="Overwrite an existing tool version if it exists"
    arg "<TOOL@VERSION>" help="Tool name and version to create a symlink for"
    arg "<PATH>" help="The local path to the tool version\ne.g.: ~/.nvm/versions/node/v20.0.0"
}
cmd "local" hide=true {
    alias "l" hide=true
    flag "-p,--parent" help="Recurse up to find a .tool-versions file rather than using the current directory only\nby default this command will only set the tool in the current directory (\"$PWD/.tool-versions\")"
    flag "--pin" help="Save exact version to `.tool-versions`\ne.g.: `mise local --pin node@20` will save `node 20.0.0` to .tool-versions"
    flag "--fuzzy" help="Save fuzzy version to `.tool-versions` e.g.: `mise local --fuzzy node@20` will save `node 20` to .tool-versions This is the default behavior unless MISE_ASDF_COMPAT=1"
    flag "--remove" help="Remove the plugin(s) from .tool-versions" var=true {
        arg "<PLUGIN>"
    }
    flag "--path" help="Get the path of the config file"
    arg "[TOOL@VERSION]..." help="Tool(s) to add to .tool-versions/.mise.toml\ne.g.: node@20\nif this is a single tool with no version,\nthe current value of .tool-versions/.mise.toml will be displayed" var=true
}
cmd "ls" {
    alias "list"
    flag "-p,--plugin" hide=true {
        arg "<PLUGIN_FLAG>"
    }
    flag "-c,--current" help="Only show tool versions currently specified in a .tool-versions/.mise.toml"
    flag "-g,--global" help="Only show tool versions currently specified in a the global .tool-versions/.mise.toml"
    flag "-i,--installed" help="Only show tool versions that are installed Hides missing ones defined in .tool-versions/.mise.toml but not yet installed"
    flag "--parseable" help="Output in an easily parseable format" hide=true
    flag "-J,--json" help="Output in json format"
    flag "-m,--missing" help="Display missing tool versions"
    flag "--prefix" help="Display versions matching this prefix" {
        arg "<PREFIX>"
    }
    flag "--no-header" help="Don't display headers"
    arg "[PLUGIN]..." help="Only show tool versions from [PLUGIN]" var=true
}
cmd "ls-remote" {
    alias "list-all" "list-remote" hide=true
    flag "--all" help="Show all installed plugins and versions"
    arg "[TOOL@VERSION]" help="Plugin to get versions for"
    arg "[PREFIX]" help="The version prefix to use when querying the latest version\nsame as the first argument after the \"@\""
}
cmd "outdated" {
    arg "[TOOL@VERSION]..." help="Tool(s) to show outdated versions for\ne.g.: node@20 python@3.10\nIf not specified, all tools in global and local configs will be shown" var=true
}
cmd "plugins" {
    alias "p"
    alias "plugin" "plugin-list" hide=true
    flag "-a,--all" help="list all available remote plugins" long_help="list all available remote plugins\n\nsame as `mise plugins ls-remote`" hide=true
    flag "-c,--core" help="The built-in plugins only\nNormally these are not shown"
    flag "--user" help="List installed plugins" long_help="List installed plugins\n\nThis is the default behavior but can be used with --core\nto show core and user plugins"
    flag "-u,--urls" help="Show the git url for each plugin\ne.g.: https://github.com/asdf-vm/asdf-node.git"
    flag "--refs" help="Show the git refs for each plugin\ne.g.: main 1234abc" hide=true
    cmd "install" {
        alias "i" "a" "add"
        flag "-f,--force" help="Reinstall even if plugin exists"
        flag "-a,--all" help="Install all missing plugins\nThis will only install plugins that have matching shorthands.\ni.e.: they don't need the full git repo url"
        flag "-v,--verbose" help="Show installation output" var=true count=true
        arg "[NEW_PLUGIN]" help="The name of the plugin to install\ne.g.: node, ruby\nCan specify multiple plugins: `mise plugins install node ruby python`"
        arg "[GIT_URL]" help="The git url of the plugin"
        arg "[REST]..." var=true hide=true
    }
    cmd "link" {
        alias "ln"
        flag "-f,--force" help="Overwrite existing plugin"
        arg "<NAME>" help="The name of the plugin\ne.g.: node, ruby"
        arg "[PATH]" help="The local path to the plugin\ne.g.: ./mise-node"
    }
    cmd "ls" {
        alias "list"
        flag "-a,--all" help="List all available remote plugins\nSame as `mise plugins ls-remote`" hide=true
        flag "-c,--core" help="The built-in plugins only\nNormally these are not shown"
        flag "--user" help="List installed plugins" long_help="List installed plugins\n\nThis is the default behavior but can be used with --core\nto show core and user plugins"
        flag "-u,--urls" help="Show the git url for each plugin\ne.g.: https://github.com/asdf-vm/asdf-node.git"
        flag "--refs" help="Show the git refs for each plugin\ne.g.: main 1234abc" hide=true
    }
    cmd "ls-remote" {
        alias "list-remote" "list-all"
        flag "-u,--urls" help="Show the git url for each plugin e.g.: https://github.com/mise-plugins/rtx-nodejs.git"
        flag "--only-names" help="Only show the name of each plugin by default it will show a \"*\" next to installed plugins"
    }
    cmd "uninstall" {
        alias "remove" "rm"
        flag "-p,--purge" help="Also remove the plugin's installs, downloads, and cache"
        flag "-a,--all" help="Remove all plugins"
        arg "[PLUGIN]..." help="Plugin(s) to remove" var=true
    }
    cmd "update" {
        alias "upgrade"
        flag "-j,--jobs" help="Number of jobs to run in parallel\nDefault: 4" {
            arg "<JOBS>"
        }
        arg "[PLUGIN]..." help="Plugin(s) to update" var=true
    }
}
cmd "prune" {
    flag "-n,--dry-run" help="Do not actually delete anything"
    arg "[PLUGIN]..." help="Prune only versions from this plugin(s)" var=true
}
cmd "reshim" {
    arg "[PLUGIN]" hide=true
    arg "[VERSION]" hide=true
}
cmd "run" {
    alias "r"
    flag "-C,--cd" help="Change to this directory before executing the command" {
        arg "<CD>"
    }
    flag "-n,--dry-run" help="Don't actually run the task(s), just print them in order of execution"
    flag "-f,--force" help="Force the task to run even if outputs are up to date"
    flag "-p,--prefix" help="Print stdout/stderr by line, prefixed with the task's label\nDefaults to true if --jobs > 1\nConfigure with `task_output` config or `MISE_TASK_OUTPUT` env var"
    flag "-i,--interleave" help="Print directly to stdout/stderr instead of by line\nDefaults to true if --jobs == 1\nConfigure with `task_output` config or `MISE_TASK_OUTPUT` env var"
    flag "-t,--tool" help="Tool(s) to also add e.g.: node@20 python@3.10" var=true {
        arg "<TOOL@VERSION>"
    }
    flag "-j,--jobs" help="Number of tasks to run in parallel\n[default: 4]\nConfigure with `jobs` config or `MISE_JOBS` env var" {
        arg "<JOBS>"
    }
    flag "-r,--raw" help="Read/write directly to stdin/stdout/stderr instead of by line\nConfigure with `raw` config or `MISE_RAW` env var"
    arg "[TASK]" help="Task to run\nCan specify multiple tasks by separating with `:::`\ne.g.: mise run task1 arg1 arg2 ::: task2 arg1 arg2" default="default"
    arg "[ARGS]..." help="Arguments to pass to the task. Use \":::\" to separate tasks" var=true
}
cmd "self-update" {
    flag "-f,--force" help="Update even if already up to date"
    flag "--no-plugins" help="Disable auto-updating plugins"
    flag "-y,--yes" help="Skip confirmation prompt"
    arg "[VERSION]" help="Update to a specific version"
}
cmd "set" {
    alias "ev" "env-vars" hide=true
    flag "--file" help="The TOML file to update" long_help="The TOML file to update\n\nDefaults to MISE_DEFAULT_CONFIG_FILENAME environment variable, or \".mise.toml\"." {
        arg "<FILE>"
    }
    flag "-g,--global" help="Set the environment variable in the global config file"
    flag "--remove" help="Remove the environment variable from config file" long_help="Remove the environment variable from config file\n\nCan be used multiple times." var=true hide=true {
        arg "<ENV_VAR>"
    }
    arg "[ENV_VARS]..." help="Environment variable(s) to set\ne.g.: NODE_ENV=production" var=true
}
cmd "settings" {
    cmd "get" {
        arg "<SETTING>" help="The setting to show"
    }
    cmd "ls" {
        alias "list"
    }
    cmd "set" {
        alias "add" "create"
        arg "<SETTING>" help="The setting to set"
        arg "<VALUE>" help="The value to set"
    }
    cmd "unset" {
        alias "rm" "remove" "delete" "del"
        arg "<SETTING>" help="The setting to remove"
    }
}
cmd "shell" {
    alias "sh"
    flag "-j,--jobs" help="Number of jobs to run in parallel\n[default: 4]" {
        arg "<JOBS>"
    }
    flag "--raw" help="Directly pipe stdin/stdout/stderr from plugin to user Sets --jobs=1"
    flag "-u,--unset" help="Removes a previously set version"
    arg "[TOOL@VERSION]..." help="Tool(s) to use" var=true
}
cmd "sync" subcommand_required=true {
    cmd "node" {
        flag "--brew" help="Get tool versions from Homebrew"
        flag "--nvm" help="Get tool versions from nvm"
        flag "--nodenv" help="Get tool versions from nodenv"
    }
    cmd "python" {
        flag "--pyenv" help="Get tool versions from pyenv" required=true
    }
}
cmd "task" {
    alias "t"
    alias "tasks" hide=true
    flag "--no-header" help="Do not print table header"
    flag "--hidden" help="Show hidden tasks"
    cmd "edit" {
        flag "-p,--path" help="Display the path to the task instead of editing it"
        arg "<TASK>" help="Task to edit"
    }
    cmd "ls" {
        flag "--no-header" help="Do not print table header"
        flag "--hidden" help="Show hidden tasks"
    }
    cmd "run" {
        alias "r"
        flag "-C,--cd" help="Change to this directory before executing the command" {
            arg "<CD>"
        }
        flag "-n,--dry-run" help="Don't actually run the task(s), just print them in order of execution"
        flag "-f,--force" help="Force the task to run even if outputs are up to date"
        flag "-p,--prefix" help="Print stdout/stderr by line, prefixed with the task's label\nDefaults to true if --jobs > 1\nConfigure with `task_output` config or `MISE_TASK_OUTPUT` env var"
        flag "-i,--interleave" help="Print directly to stdout/stderr instead of by line\nDefaults to true if --jobs == 1\nConfigure with `task_output` config or `MISE_TASK_OUTPUT` env var"
        flag "-t,--tool" help="Tool(s) to also add e.g.: node@20 python@3.10" var=true {
            arg "<TOOL@VERSION>"
        }
        flag "-j,--jobs" help="Number of tasks to run in parallel\n[default: 4]\nConfigure with `jobs` config or `MISE_JOBS` env var" {
            arg "<JOBS>"
        }
        flag "-r,--raw" help="Read/write directly to stdin/stdout/stderr instead of by line\nConfigure with `raw` config or `MISE_RAW` env var"
        arg "[TASK]" help="Task to run\nCan specify multiple tasks by separating with `:::`\ne.g.: mise run task1 arg1 arg2 ::: task2 arg1 arg2" default="default"
        arg "[ARGS]..." help="Arguments to pass to the task. Use \":::\" to separate tasks" var=true
    }
}
cmd "trust" {
    flag "-a,--all" help="Trust all config files in the current directory and its parents"
    flag "--untrust" help="No longer trust this config"
    arg "[CONFIG_FILE]" help="The config file to trust"
}
cmd "uninstall" {
    alias "remove" "rm"
    flag "-a,--all" help="Delete all installed versions"
    flag "-n,--dry-run" help="Do not actually delete anything"
    arg "[TOOL@VERSION]..." help="Tool(s) to remove" var=true
}
cmd "unset" {
    flag "-f,--file" help="Specify a file to use instead of \".mise.toml\"" {
        arg "<FILE>"
    }
    flag "-g,--global" help="Use the global config file"
    arg "[KEYS]..." help="Environment variable(s) to remove\ne.g.: NODE_ENV" var=true
}
cmd "upgrade" {
    alias "up"
    flag "-n,--dry-run" help="Just print what would be done, don't actually do it"
    flag "-j,--jobs" help="Number of jobs to run in parallel\n[default: 4]" {
        arg "<JOBS>"
    }
    flag "-i,--interactive" help="Display multiselect menu to choose which tools to upgrade"
    flag "--raw" help="Directly pipe stdin/stdout/stderr from plugin to user Sets --jobs=1"
    arg "[TOOL@VERSION]..." help="Tool(s) to upgrade\ne.g.: node@20 python@3.10\nIf not specified, all current tools will be upgraded" var=true
}
cmd "usage"
cmd "use" {
    alias "u"
    flag "-f,--force" help="Force reinstall even if already installed"
    flag "--fuzzy" help="Save fuzzy version to config file\ne.g.: `mise use --fuzzy node@20` will save 20 as the version\nthis is the default behavior unless MISE_ASDF_COMPAT=1"
    flag "-g,--global" help="Use the global config file (~/.config/mise/config.toml) instead of the local one"
    flag "-e,--env" help="Modify an environment-specific config file like .mise.<env>.toml" {
        arg "<ENV>"
    }
    flag "-j,--jobs" help="Number of jobs to run in parallel\n[default: 4]" {
        arg "<JOBS>"
    }
    flag "--raw" help="Directly pipe stdin/stdout/stderr from plugin to user Sets --jobs=1"
    flag "--remove" help="Remove the plugin(s) from config file" var=true {
        arg "<PLUGIN>"
    }
    flag "-p,--path" help="Specify a path to a config file or directory If a directory is specified, it will look for .mise.toml (default) or .tool-versions" {
        arg "<PATH>"
    }
    flag "--pin" help="Save exact version to config file\ne.g.: `mise use --pin node@20` will save 20.0.0 as the version\nSet MISE_ASDF_COMPAT=1 to make this the default behavior"
    arg "[TOOL@VERSION]..." help="Tool(s) to add to config file\ne.g.: node@20, cargo:ripgrep@latest npm:prettier@3\nIf no version is specified, it will default to @latest" var=true
}
cmd "version" {
    alias "v" hide=true
}
cmd "watch" {
    alias "w"
    flag "-t,--task" help="Task to run" var=true {
        arg "<TASK>"
    }
    flag "-g,--glob" help="Files to watch\nDefaults to sources from the task(s)" var=true {
        arg "<GLOB>"
    }
    arg "[ARGS]..." help="Extra arguments" var=true
}
cmd "where" {
    arg "<TOOL@VERSION>" help="Tool(s) to look up\ne.g.: ruby@3\nif \"@<PREFIX>\" is specified, it will show the latest installed version\nthat matches the prefix\notherwise, it will show the current, active installed version"
    arg "[ASDF_VERSION]" help="the version prefix to use when querying the latest version\nsame as the first argument after the \"@\"\nused for asdf compatibility" hide=true
}
cmd "which" {
    flag "--plugin" help="Show the plugin name instead of the path"
    flag "--version" help="Show the version instead of the path"
    flag "-t,--tool" help="Use a specific tool@version\ne.g.: `mise which npm --tool=node@20`" {
        arg "<TOOL@VERSION>"
    }
    arg "<BIN_NAME>" help="The bin name to look up"
}
cmd "render-completion" hide=true {
    flag "-s,--shell" help="Shell type to generate completions for" hide=true {
        arg "<SHELL_TYPE>"
    }
    arg "[SHELL]" help="Shell type to generate completions for"
}
cmd "render-help" hide=true
cmd "render-mangen" hide=true

