---
source: lib/src/complete/bash.rs
expression: "complete_bash(&CompleteOptions\n{\n    usage_bin: \"usage\".to_string(), shell: \"bash\".to_string(), bin:\n    \"mycli\".to_string(), cache_key: None, spec:\n    Some(SPEC_KITCHEN_SINK.clone()), usage_cmd: None,\n    include_bash_completion_lib: false,\n})"
snapshot_kind: text
---
_mycli() {
    if ! command -v usage &> /dev/null; then
        echo >&2
        echo "Error: usage CLI not found. This is required for completions to work in mycli." >&2
        echo "See https://usage.jdx.dev for more information." >&2
        return 1
    fi

    read -r -d '' _usage_spec_mycli <<'__USAGE_EOF__'
name mycli
bin mycli
source_code_link_template "https://github.com/jdx/mise/blob/main/src/cli/{{path}}.rs"
flag --flag1 help="flag1 description"
flag --flag2 help="flag2 description" {
    long_help "flag2 long description\n\nincludes a code block:\n\n    $ echo hello world\n    hello world\n\n    more code\n\nExamples:\n\n    # run with no arguments to use the interactive selector\n    $ mise use\n\n    # set the current version of node to 20.x in mise.toml of current directory\n    # will write the fuzzy version (e.g.: 20)\n\nsome docs\n\n    $ echo hello world\n    hello world"
}
flag --flag3 help="flag3 description" negate=--no-flag3
flag --with-default
flag --shell {
    arg <shell> {
        choices bash zsh fish
    }
}
arg <arg1> help="arg1 description"
arg "[arg2]" help="arg2 description" required=#false default="default value" {
    choices choice1 choice2 choice3
}
arg <arg3> help="arg3 description" help_long="arg3 long description"
arg <argrest>... var=#true
arg "[with-default]" required=#false default="default value"
complete plugin run="echo \"plugin-1\nplugin-2\nplugin-3\""
cmd plugin {
    cmd install {
        long_help "install a plugin"
        flag "-g --global" global=#true
        flag "-d --dir" {
            arg <dir>
        }
        flag "-f --force" negate=--no-force
        arg <plugin>
        arg <version>
    }
}
__USAGE_EOF__

	local cur prev words cword was_split comp_args
    _comp_initialize -n : -- "$@" || return
    # shellcheck disable=SC2207
	_comp_compgen -- -W "$(usage complete-word --shell bash -s "${_usage_spec_mycli}" --cword="$cword" -- "${words[@]}")"
	_comp_ltrim_colon_completions "$cur"
    # shellcheck disable=SC2181
    if [[ $? -ne 0 ]]; then
        unset COMPREPLY
    fi
    return 0
}

if [[ "${BASH_VERSINFO[0]}" -eq 4 && "${BASH_VERSINFO[1]}" -ge 4 || "${BASH_VERSINFO[0]}" -gt 4 ]]; then
    shopt -u hostcomplete && complete -o nospace -o bashdefault -o nosort -F _mycli mycli
else
    shopt -u hostcomplete && complete -o nospace -o bashdefault -F _mycli mycli
fi
# vim: noet ci pi sts=0 sw=4 ts=4 ft=sh
