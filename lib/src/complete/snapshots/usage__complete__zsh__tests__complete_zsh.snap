---
source: lib/src/complete/zsh.rs
expression: "complete_zsh(&CompleteOptions\n{\n    usage_bin: \"usage\".to_string(), shell: \"zsh\".to_string(), bin:\n    \"mycli\".to_string(), cache_key: None, spec: None, usage_cmd:\n    Some(\"mycli complete --usage\".to_string()), include_bash_completion_lib:\n    false, source_file: None,\n})"
---
# @generated by usage-cli from usage spec

#compdef mycli
local curcontext="$curcontext"

# caching config
_usage_mycli_cache_policy() {
  if [[ -z "${lifetime}" ]]; then
    lifetime=$((60*60*4)) # 4 hours
  fi
  local -a oldp
  oldp=( "$1"(Nms+${lifetime}) )
  (( $#oldp ))
}

_mycli() {
  typeset -A opt_args
  local curcontext="$curcontext" cache_policy

  if ! type -p usage &> /dev/null; then
      echo >&2
      echo "Error: usage CLI not found. This is required for completions to work in mycli." >&2
      echo "See https://usage.jdx.dev for more information." >&2
      return 1
  fi

  local spec_file="${TMPDIR:-/tmp}/usage__usage_spec_mycli.spec"
  mycli complete --usage > "$spec_file"
  _arguments "*: :(($(command usage complete-word --shell zsh -f "$spec_file" -- "${words[@]}" )))"
  return 0
}

if [ "$funcstack[1]" = "_mycli" ]; then
    _mycli "$@"
else
    compdef _mycli mycli
fi

# vim: noet ci pi sts=0 sw=4 ts=4
