# @generated by usage-cli from usage spec

#compdef usage
local curcontext="$curcontext"

# caching config
_usage_usage_cache_policy() {
  if [[ -z "${lifetime}" ]]; then
    lifetime=$((60*60*4)) # 4 hours
  fi
  local -a oldp
  oldp=( "$1"(Nms+${lifetime}) )
  (( $#oldp ))
}

_usage() {
  typeset -A opt_args
  local curcontext="$curcontext" spec cache_policy

  if ! type -p usage &> /dev/null; then
      echo >&2
      echo "Error: usage CLI not found. This is required for completions to work in usage." >&2
      echo "See https://usage.jdx.dev for more information." >&2
      return 1
  fi

  zstyle -s ":completion:${curcontext}:" cache-policy cache_policy
  if [[ -z $cache_policy ]]; then
    zstyle ":completion:${curcontext}:" cache-policy _usage_usage_cache_policy
  fi

  if ( [[ -z "${_usage_spec_usage:-}" ]] || _cache_invalid _usage_spec_usage ) \
      && ! _retrieve_cache _usage_spec_usage;
  then
    spec="$(usage --usage-spec)"
    _store_cache _usage_spec_usage spec
  fi

  local spec_file="${TMPDIR:-/tmp}/usage__usage_spec_usage.spec"
  # Always update spec file when not cached
  echo "$spec" > "$spec_file"
  _arguments "*: :(($(command usage complete-word --shell zsh -f "$spec_file" -- "${words[@]}" )))"
  return 0
}

if [ "$funcstack[1]" = "_usage" ]; then
    _usage "$@"
else
    compdef _usage usage
fi

# vim: noet ci pi sts=0 sw=4 ts=4
